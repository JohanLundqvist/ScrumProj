@model ScrumProj.Models.EntryViewModel
@if (User.Identity.IsAuthenticated)
{
    ViewBag.Title = "Blogpage";
    Layout = "~/Views/Shared/_navbarSignedIn.cshtml";

}



<!--
    -------------------------------------------------------------------------------------
    Code to show the "Formella bloggen"
    -------------------------------------------------------------------------------------
-->
<div class="row">
    <div class="col-md-4">
        <h2>Formella blogg</h2>
        @if (Model.ListOfEntriesToLoopInBlogView != null || Model.ListOfEntriesToLoopInBlogView.Count > 0)
        {
            for (int i = Model.ListOfEntriesToLoopInBlogView.Count() - 1; i >= 0; i--)
            {
                var FormalEntry = Model.ListOfEntriesToLoopInBlogView[i];
                <div class="card mb-1">
                    <h3 class="card-header">@FormalEntry.entry.Title</h3>
                    <h5 class="card-header">
                        @FormalEntry.entry.Author
                        @if (FormalEntry.entry.AuthorId == Model.loggedInUser.ID)
                        {
                            if (FormalEntry.File != null)
                            {
                                <small style="float:right; font-size: x-small">
                                    @Html.ActionLink("Redigera inlägg", "EditEntryView",
                                    new
                                    {
                                    postId = FormalEntry.entry.Id,
                                    Title = FormalEntry.entry.Title,
                                    Content = FormalEntry.entry.Content,
                                    fileId = FormalEntry.File.FileId
                                    })
                                </small>
                            }
                            else
                            {
                                <small style="float:right; font-size: x-small">
                                    @Html.ActionLink("Redigera inlägg", "EditEntryView",
                                    new
                                    {
                                    postId = FormalEntry.entry.Id,
                                    Title = FormalEntry.entry.Title,
                                    Content = FormalEntry.entry.Content
                                    })
                                </small>
                            }

                            <br />

                            <small style="float:right; font-size: x-small">@Html.ActionLink("Ta bort inlägg", "DeleteEntry", new { postId = FormalEntry.entry.Id })</small>
                        }
                    </h5>

                    @if (FormalEntry.entry.ImageUrl != "")
                    {
                        <div class="container">
                            <a href="@FormalEntry.entry.ImageUrl" target="_blank"><img src="@FormalEntry.entry.ImageUrl" alt="Avatar-Image" class="img-thumbnail" style="height:auto;width:100%;" /></a>
                        </div>
                    }

                    <div class="card-body">
                        <p class="card-text">@FormalEntry.entry.Content</p>
                        @if (FormalEntry.File != null)
                        {
                            @Html.ActionLink(FormalEntry.File.FileName, "DownLoadFile", new { id = FormalEntry.File.FileId })

                            <br />

                            <small style="font-size: x-small">@Html.ActionLink("Ta bort fil", "RemoveFile", new { postId = FormalEntry.entry.Id })</small>
                        }
                    </div>

                    <div class="card-body" style="padding-bottom: 0px; padding-top: 0px;">
                        @if (Model.Categories != null)
                        {
                            foreach (var e in Model.CategoryIds)
                            {
                                if (e.EntryId == FormalEntry.entry.Id)
                                {
                                    <ul class="d-md-inline-block" style="list-style-type: none; padding-left: 0px;">
                                        @foreach (var c in Model.Categories)
                                        {
                                            if (e.CategoryId == c.Id)
                                            {
                                                <li style="float:left;">
                                                    <a href="#" class="list-group-item list-group-item-action flex-column align-items-start" style="padding: 5px; float:left">
                                                        <small class="mb-1">@c.Name</small>
                                                    </a>
                                                </li>
                                            }
                                        }
                                    </ul>
                                }
                            }
                        }
                    </div>

                    <div class="card-body">
                        @if (Model.ListOfComments != null)
                        {
                            foreach (var c in Model.ListOfComments)
                            {
                                if (c.EntryId == FormalEntry.entry.Id)
                                {
                                    <div class="list-group">
                                        <a href="#" class="list-group-item list-group-item-action flex-column align-items-start">
                                            <div class="d-flex w-100 justify-content-between">
                                                <h6 class="mb-1">@c.Author</h6>
                                            </div>
                                            <small class="mb-1">@c.comment</small>
                                        </a>
                                    </div>
                                }
                            }
                        }

                        @using (Html.BeginForm("PostComment", "Entry", new { postId = FormalEntry.entry.Id }, FormMethod.Post, null))
                        {
                            <div>
                                @Html.TextBoxFor(c => c.comment, new { maxLength = 140, @class = "form-control", style = "min-width = 100%" })
                            </div>

                            <br />

                            <div>
                                <input type="submit" class="btn btn-info" value="Kommentera" />
                            </div>
                        }
                    </div>
                </div>
            }
        }
    </div>



    <!--
        -------------------------------------------------------------------------------------
        Code to publish an Entry
        -------------------------------------------------------------------------------------
    -->
    <div class="col-md-4">
        @using (Html.BeginForm("PublishEntry", "Entry", FormMethod.Post, new { role = "form", enctype = "multipart/form-data" }))
        {
            @Html.AntiForgeryToken()
            @Html.ValidationSummary("", new { @class = "text-danger" })
            <div class="form-group">
                @Html.LabelFor(u => u.entry.Title)
                @Html.TextBoxFor(u => u.entry.Title, new { maxLength = "30", @class = "form-control", id = "Titel", style = "min-width: 100%" })
                <span id="text-counter">30</span> tecken kvar.
            </div>
            <div class="form-control-static panel-primary">
                <div class="form-group">
                    <div>

                        @Html.TextAreaFor(u => u.entry.Content, new { maxLength = "1000", id = "Message", @class = "form-control", style = "min-width: 100%" })
                        <span id="text-counter2">1000</span> tecken kvar.
                    </div>
                </div>

                <div class="form-group">
                    <div class="ui-widget">
                        <label for="tags">Lägg till kategori: </label>
                        <input class="form-control" id="tags" name="tags" style="min-width: 100%" />
                    </div>
                    <span id="faux" style="display:none;"></span>

                </div>
                @Html.LabelFor(u => u.File.FileName)
                <div class="form-group">
                    <div>
                        <input type="file" id="newFile" name="newFile" />
                    </div>
                    <br />
                    <label>Ladda upp bild:</label>
                    <div>
                        @Html.TextBox("img", "", new { type = "file", Id = "ImageFile", accept = ".jpg, .jpeg, .png, .gif" })
                    </div>
                </div>

                <div class="form-group">
                    <div>
                        <select id="SelectBlogg" name="SelectBlogg" class="form-control" width:50%">
                            <option value="1">Formell</option>
                            <option value="2">Informell</option>
                        </select>

                    </div>

                    <br />

                    <div>
                        <input type="submit" value="Posta inlägg" class="btn btn-success" id="SubmitButton" />
                    </div>
                </div>
            </div>
        }
    </div>



    <!--
        -------------------------------------------------------------------------------------
        Code to show the "Informella bloggen"
        -------------------------------------------------------------------------------------
    -->
    <div class="col-md-4">
        <h2>Informell blogg</h2>
        @if (Model.ListOfInformalEntriesToLoopInBlogView != null || Model.ListOfInformalEntriesToLoopInBlogView.Count > 0)
        {
            for (int i = Model.ListOfInformalEntriesToLoopInBlogView.Count() - 1; i >= 0; i--)
            {
                var FormalEntry = Model.ListOfInformalEntriesToLoopInBlogView[i];
                <div class="card mb-1">
                    <h3 class="card-header">@FormalEntry.entry.Title</h3>
                    <h5 class="card-header">
                        @FormalEntry.entry.Author
                        @if (FormalEntry.entry.AuthorId == Model.loggedInUser.ID)
                        {
                            if (FormalEntry.File != null)
                            {
                                <small style="float:right; font-size: x-small">
                                    @Html.ActionLink("Redigera inlägg", "EditEntryView",
                                    new
                                    {
                                    postId = FormalEntry.entry.Id,
                                    Title = FormalEntry.entry.Title,
                                    Content = FormalEntry.entry.Content,
                                    fileId = FormalEntry.File.FileId
                                    })
                                </small>
                            }
                            else
                            {
                                <small style="float:right; font-size: x-small">
                                    @Html.ActionLink("Redigera inlägg", "EditEntryView",
                                    new
                                    {
                                    postId = FormalEntry.entry.Id,
                                    Title = FormalEntry.entry.Title,
                                    Content = FormalEntry.entry.Content
                                    })
                                </small>
                            }
                            <br />
                            <small style="float:right; font-size: x-small">@Html.ActionLink("Ta bort inlägg", "DeleteEntry", new { postId = FormalEntry.entry.Id })</small>
                        }
                    </h5>

                    @if (FormalEntry.entry.ImageUrl != "")
                    {
                        <div class="container">
                            <a href="@FormalEntry.entry.ImageUrl" target="_blank"><img src="@FormalEntry.entry.ImageUrl" alt="Avatar-Image" class="img-thumbnail" style="height:auto;width:100%;" /></a>
                        </div>
                    }

                    <div class="card-body">
                        <p class="card-text">@FormalEntry.entry.Content</p>
                        @if (FormalEntry.File != null)
                        {
                            @Html.ActionLink(FormalEntry.File.FileName, "DownLoadFile", new { id = FormalEntry.File.FileId })
                            <br />
                            <small style="font-size: x-small">@Html.ActionLink("Ta bort fil", "RemoveFile", new { postId = FormalEntry.entry.Id })</small>
                        }
                    </div>

                    <div class="card-body" style="padding-bottom: 0px; padding-top: 0px;">
                        @if (Model.Categories != null)
                        {
                            foreach (var e in Model.CategoryIds)
                            {
                                if (e.EntryId == FormalEntry.entry.Id)
                                {
                                    <ul class="d-md-inline-block" style="list-style-type: none; padding-left: 0px;">
                                        @foreach (var c in Model.Categories)
                                        {
                                            if (e.CategoryId == c.Id)
                                            {
                                                <li style="float:left;">
                                                    <a href="#" class="list-group-item list-group-item-action flex-column align-items-start" style="padding: 5px; float:left">
                                                        <small class="mb-1">@c.Name</small>
                                                    </a>
                                                </li>
                                            }
                                        }
                                    </ul>
                                }
                            }
                        }
                    </div>

                    <div class="card-body">
                        @if (Model.ListOfComments != null)
                        {
                            foreach (var c in Model.ListOfComments)
                            {
                                if (c.EntryId == FormalEntry.entry.Id)
                                {
                                    <div class="list-group">
                                        <a href="#" class="list-group-item list-group-item-action flex-column align-items-start">
                                            <div class="d-flex w-100 justify-content-between">
                                                <h6 class="mb-1">@c.Author</h6>
                                            </div>
                                            <small class="mb-1">@c.comment</small>
                                        </a>
                                    </div>
                                }
                            }
                        }

                        @using (Html.BeginForm("PostComment", "Entry", new { postId = FormalEntry.entry.Id }, FormMethod.Post, null))
                        {
                            <div>
                                @Html.TextBoxFor(c => c.comment, new { @class = "form-control", style = "min-width = 100%" })
                            </div>

                            <br />

                            <div>
                                <input type="submit" class="btn btn-info" value="Kommentera" />
                            </div>
                        }
                    </div>
                </div>
            }
        }
    </div>
</div>



<!--
    -------------------------------------------------------------------------------------
    jQuery scripts
    -------------------------------------------------------------------------------------
-->
@section scripts {

    <script src="~/Scripts/jquery-3.3.1.js"></script>
    <link rel="stylesheet" href="//code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css">
    <script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></script>

    <script>
        $(function () {
            $('#Titel').keyup(function (e) {
                var max = 30;
                var len = $(this).val().length;
                var char = max - len;
                $('#text-counter').html(char);
            });
        });

        $(function () {
            $('#Message').keyup(function (e) {
                var max = 1000;
                var len = $(this).val().length;
                var char = max - len;
                $('#text-counter2').html(char);
            });
        });


    var myFile = document.getElementById('newFile');
    myFile.addEventListener('change', function () {
        if (this.files[0].size > 4000000) {
            alert("Filen är för stor, gränsen är 4 mb");
            myFile.value = "";
        }
    });

    var myImageFile = document.getElementById('ImageFile');
    myImageFile.addEventListener('change', function () {
        if (this.files[0].size > 4000000) {
            alert("Filen är för stor, gränsen är 4 mb");
            myImageFile.value = "";
        }
    });
        $("#searchInput").autocomplete({
        source: function (request, response) {
            $.ajax({
                url: '@Url.Action("GetSearchValue","Entry")',
                dataType: "json",
                data: { search: $("#searchInput").val() },
                success: function (data) {
                    response($.map(data, function (item) {
                        return { label: item, value: item };
                    }));
                },
                error: function (xhr, status, error) {
                    alert("Error");
                }
            });
        }
        });

        var availableTags = [];

        @foreach (var c in Model.Categories)
        {
            @:availableTags.push("@c.Name");
        }
        var faux = $("#faux");
        var arrayused;
        var calcfaux;
        var retresult;
        var checkspace;
        var contents = $('#tags')[0];
        var carpos;
        var fauxpos;
        var tier;
        var startss;
        var endss;
        function getCaret(el) {
            if (el.selectionStart) {
                return el.selectionStart;
            } else if (document.selection) {
                el.focus();

                var r = document.selection.createRange();
                if (r == null) {
                    return 0;
                }

                var re = el.createTextRange(),
                    rc = re.duplicate();
                re.moveToBookmark(r.getBookmark());
                rc.setEndPoint('EndToStart', re);

                return rc.text.length;
            }
            return 0;
        }

        function split(val) {
            return val.split(/ \s*/);
        }
        function extractLast(term) {
            return split(term).pop();
        }
        $("#tags")
            .on("keydown", function (event) {
                if (event.keyCode === $.ui.keyCode.TAB &&
                    $(this).data("autocomplete").menu.active) {
                    event.preventDefault();
                }
            })
            .click(function (event) {
                carpos = getCaret(contents);
                fauxpos = faux.text().length;
                if (carpos < fauxpos) {
                    tier = "close";
                    $(this).autocomplete("close");
                    startss = this.selectionStart;
                    endss = this.selectionEnd;
                    $(this).val($(this).val().replace(/ *$/, ''));
                    this.setSelectionRange(startss, endss);
                }
                else {
                    tier = "open";
                }

            })
            .on("keyup", function (event) {
                calcfaux = faux.text($(this).val());
                fauxpos = faux.text().length;
                if (/ $/.test(faux.text()) || tier === "close") {
                    checkspace = "space";
                }
                else {
                    checkspace = "nospace";
                }


                if (fauxpos <= 1) {
                    tier = "open";
                }
                carpos = getCaret(contents);
                if (carpos < fauxpos) {
                    tier = "close";
                    $(this).autocomplete("close");
                    startss = this.selectionStart;
                    endss = this.selectionEnd;
                    $(this).val($(this).val().replace(/ *$/, ''));
                    this.setSelectionRange(startss, endss);
                }
                else {
                    tier = "open";
                }
            })
            //mouse caret position dropdown
            .autocomplete({
                minLength: 1,
                search: function (event, ui) {
                    var input = $(event.target);
                    // custom minLength
                    if (checkspace === "space") {
                        input.autocomplete("close");
                        return false;
                    }
                },
                source: function (request, response) {

                    var term = $.ui.autocomplete.escapeRegex(extractLast(request.term))
                        // Create two regular expressions, one to find suggestions starting with the user's input:
                        , startsWithMatcher = new RegExp("^" + term, "i")
                        , startsWith = $.grep(availableTags, function (value) {
                            return startsWithMatcher.test(value.label || value.value || value);
                        })
                        // ... And another to find suggestions that just contain the user's input:
                        , containsMatcher = new RegExp(term, "i")
                        , contains = $.grep(availableTags, function (value) {
                            return $.inArray(value, startsWith) < 0 &&
                                containsMatcher.test(value.label || value.value || value);
                        });

                    // Supply the widget with an array containing the suggestions that start with the user's input,
                    // followed by those that just contain the user's input.
                    response(startsWith.concat(contains));
                },
                open: function (event, ui) {
                    var input = $(event.target),
                        widget = input.autocomplete("widget"),
                        style = $.extend(input.css([
                            "font",
                            "border-left",
                            "padding-left"
                        ]), {
                                position: "absolute",
                                visibility: "hidden",
                                "padding-right": 0,
                                "border-right": 0,
                                "white-space": "pre"
                            }),
                        div = $("<div/>"),
                        pos = {
                            my: "left top",
                            collision: "none"
                        },
                        offset = -7; // magic number to align the first letter
                    // in the text field with the first letter
                    // of suggestions
                    // depends on how you style the autocomplete box

                    widget.css("width", "");

                    div
                        .text(input.val().replace(/\S*$/, ""))
                        .css(style)
                        .insertAfter(input);
                    offset = Math.min(
                        Math.max(offset + div.width(), 0),
                        input.width() - widget.width()
                    );
                    div.remove();

                    pos.at = "left+" + offset + " bottom";
                    input.autocomplete("option", "position", pos);

                    widget.position($.extend({ of: input }, pos));
                },
                focus: function () {
                    // prevent value inserted on focus
                    return false;
                },
                select: function (event, ui) {
                    var terms = split(this.value);
                    startss = this.selectionStart;
                    endss = this.selectionEnd;
                    // remove the current input
                    terms.pop();
                    // add the selected item
                    terms.push(ui.item.value);
                    // add placeholder to get the comma-and-space at the end
                    terms.push("");
                    this.setSelectionRange(startss, endss);
                    this.value = terms.join(" ");
                    calcfaux = faux.text($(this).val());
                    if (/ $/.test(faux.text())) {
                        checkspace = "space";
                    }
                    else {
                        checkspace = "nospace";
                    }
                    carpos = getCaret(contents);
                    fauxpos = faux.text().length;
                    return false;
                }
            });
    </script>
}



<!--
    -------------------------------------------------------------------------------------
    JavaScript to show an Alert message
    -------------------------------------------------------------------------------------
-->
@if (ViewBag.Message != null)
{
    <script type="text/javascript" charset="iso-8859-1" culture="sv-se">
    window.onload = function () {
        alert('@Html.Raw(ViewBag.Message)');
    }
    </script>
}



<script>

    debugger
    var data = $("blogpageForm").serialize();

    var CreateProfile = function () {
        if (!$("blogpageForm").valid()) {
            return false;
        }
    }

</script>
